name: Integration Continue

on:
  push:
    branches:
      - cd

env:
  # Use docker.io for Docker Hub if empty
  SHA: ${{ github.event.pull_request.head.sha || github.event.after }}

jobs:
  deploiement-terraform:
    runs-on: ${{ vars.IMAGE_OS }}

    steps:
      - uses: actions/checkout@v3

      - name: "Google auth"
        id: "auth"
        uses: "google-github-actions/auth@v1"
        with:
          workload_identity_provider: "${{ secrets.WORKLOAD_IDENTITY_PROVIDER }}"
          service_account: "${{ secrets.WORKLOAD_SERVICE_ACCOUNT }}"

      - name: "Terraform"
        run: |
          cd terraform
          terraform init
          terraform apply -auto-approve

  check-docker-image:
    runs-on: ${{ vars.IMAGE_OS }}
    steps:
      - uses: actions/checkout@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USER }}
          password: ${{ secrets.DOCKER_TOKEN }}

      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@v4.4.0
        with:
          images: ${{ secrets.DOCKER_USER }}/${{ vars.DOCKER_REPO }}
          labels: |
            org.opencontainers.image.revision=${{ env.SHA }}
          tags: |
            type=edge,branch=$repo.default_branch
            type=semver,pattern=v{{version}}
            type=sha,prefix=,suffix=,format=short

      - name: Check image
        uses: docker/scout-action@v0.18.1
        with:
          command: cves
          image: ${{ secrets.DOCKER_USER }}/${{ vars.DOCKER_REPO }}:${{ vars.DOCKER_IMAGE_VERSION }}
          exit-code: true
          # token: ${{ secrets.DOCKER_TOKEN }}

  push-docker-image-to-GCR:
    needs: [check-docker-image]
    runs-on: ${{ vars.IMAGE_OS }}

    steps:
      - uses: actions/checkout@v3

      - name: "Google auth"
        id: "auth"
        uses: "google-github-actions/auth@v1"
        with:
          workload_identity_provider: "${{ secrets.WORKLOAD_IDENTITY_PROVIDER }}"
          service_account: "${{ secrets.WORKLOAD_SERVICE_ACCOUNT }}"

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USER }}
          password: ${{ secrets.DOCKER_TOKEN }}

      - name: "Build and push"
        uses: RafikFarhad/push-to-gcr-github-action@v5-beta
        with:
          registry: gcr.io
          project_id: ${{ vars.GCP_PROJECT }}
          image_name: TP4-CD
          image_tag: 1
          dockerfile: ./docker-app/python/Dockerfile
          context: ./docker-app/python

  Image-deployment:
    needs: [push-docker-image-to-GCR]
    runs-on: ${{ vars.IMAGE_OS }}

    steps:
      - name: "Google auth"
        id: "auth"
        uses: "google-github-actions/auth@v1"
        with:
          workload_identity_provider: "${{ secrets.WORKLOAD_IDENTITY_PROVIDER }}"
          service_account: "${{ secrets.WORKLOAD_SERVICE_ACCOUNT }}"

      - name: "compute-ssh"
        uses: "google-github-actions/ssh-compute@v0"
        with:
          instance_name: "example-instance"
          zone: "us-central1-a"
          ssh_private_key: "${{ secrets.GCP_SSH_PRIVATE_KEY }}"

  ansible-playbook:
    runs-on: ${{ vars.IMAGE_OS}}
    steps:
      - name: Install ansible
        run: |
          if ! command -v ansible &> /dev/null; then
          sudo apt update
          sudo apt install -y ansible
          fi
      - name: Run ansible playbook
        run: |
